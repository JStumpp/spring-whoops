// old-style plugins that are not registered at plugins.gradle.org:
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.8.0"
  }
}

// new-style plugins that ARE registered at plugins.gradle.org:
plugins {
  id 'java'
  id 'maven'
  id 'signing'
  id 'org.springframework.boot' version '1.5.3.RELEASE'
  id 'com.palantir.git-version' version '0.5.2'
}
apply plugin: 'io.codearte.nexus-staging'

group = 'com.github.jstumpp'
version gitVersion() // https://github.com/palantir/gradle-git-version

ext {
  isReleaseVersion = (version ==~ /\d+\.\d+\.\d+/)
  publishUrl = (isReleaseVersion ? 'https://oss.sonatype.org/service/local/staging/deploy/maven2/' : 'file:build/.m2')
  publishUserName = project.findProperty('publishUsername') ?: ''
  publishPassword = project.findProperty('publishPassword') ?: ''
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
}

dependencies {
  compile('org.springframework.boot:spring-boot')
  compile('org.springframework.boot:spring-boot-starter-web')
  compile('org.springframework.boot:spring-boot-autoconfigure')
  compile 'com.mitchellbosecke:pebble:2.4.0'
  compile 'com.google.guava:guava:23.0'
  compile 'io.vavr:vavr:0.9.0'
}

bootRepackage {
  enabled = false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}

signing {
  required { isReleaseVersion && gradle.taskGraph.hasTask('uploadArchives') }
  sign configurations.archives
}

uploadArchives {
  doFirst {
    println "Will upload version '${version}' to '${publishUrl}' (isReleaseVersion=${isReleaseVersion})"
  }

  repositories {
    mavenDeployer {
      if (isReleaseVersion) {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
      }
      repository(url: publishUrl) {
        authentication(
          userName: publishUserName,
          password: publishPassword
        )
      }

      pom.project {
         name 'Spring-Whoops - Pretty error page for Spring Boot'
         packaging 'jar'
         description 'Spring-Whoops - Pretty error page for Spring Boot that helps you debug your web application.'
         url 'https://github.com/jstumpp/spring-whoops'

         scm {
           url 'scm:git@github.com:jstumpp/spring-whoops.git'
           connection 'scm:git@github.com:jstumpp/spring-whoops.git'
           developerConnection 'scm:git@github.com:jstumpp/spring-whoops.git'
         }

         licenses {
           license {
             name 'The Apache Software License, Version 2.0'
             url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
             distribution 'repo'
           }
         }

         developers {
           developer {
             id 'jstumpp'
             name 'JÃ¼rgen Stumpp'
           }
         }
       }
    }
  }
}

// https://github.com/Codearte/gradle-nexus-staging-plugin/
if (isReleaseVersion) {
  uploadArchives.finalizedBy closeAndReleaseRepository
}